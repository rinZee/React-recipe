{"version":3,"sources":["context/GlobalState.js","components/Form.js","components/Recipes.js","components/Recipe.js","App.js","serviceWorker.js","index.js"],"names":["GlobalContext","createContext","Form","useState","search","setSearch","setQuery","useContext","className","onSubmit","e","preventDefault","type","value","onChange","target","placeholder","Recipes","recipes","getRecipe","to","map","recipe","index","pathname","label","state","key","src","image","alt","Recipe","useLocation","ingredientLines","ingredient","App","setRecipes","query","a","fetch","response","json","data","hits","console","log","useEffect","Provider","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kXAKaA,EAAgBC,wBAAc,ICiC5BC,G,MAjCF,WAAO,IAAD,EAEaC,mBAAS,IAFtB,mBAERC,EAFQ,KAEAC,EAFA,KAGRC,EAAYC,qBAAWP,GAAvBM,SAWP,OACO,0BAAME,UAAU,cAAeC,SANlB,SAACC,GACjBA,EAAEC,iBACFL,EAASF,GACTC,EAAU,MAIZ,2BACEG,UAAU,aACVI,KAAK,OACLC,MAAOT,EACPU,SAfiB,SAACJ,GAClBL,EAAUK,EAAEK,OAAOF,QAenBG,YAAY,kBAGpB,4BAAQR,UAAU,gBAAgBI,KAAK,UAAvC,aCUeK,G,MAlCC,WAAO,IAAD,EACQV,qBAAWP,GAAhCkB,EADa,EACbA,QAASC,EADI,EACJA,UACd,OACJ,6BACQ,yBAAKX,UAAU,WACd,kBAAC,IAAD,CAAMY,GAAI,gBAAiBZ,UAAU,SAAQ,0CAE5C,kBAAC,EAAD,CAAMW,UAAWA,KAEnB,yBAAKX,UAAU,WACjBU,EAAQG,KAAI,SAACC,EAAQC,GAAT,OACZ,kBAAC,IAAD,CAAMH,GAAI,CACdI,SAAS,WAAD,OAAaF,EAAOA,OAAOG,OACnCC,MAAO,CAACJ,WACJd,UAAU,SACR,yBAAKA,UAAU,SAASmB,IAAKJ,GAE9B,yBAAKK,IAAKN,EAAOA,OAAOO,MAAOC,IAAKR,EAAOA,OAAOG,QAClD,4BAAKH,EAAOA,OAAOG,gB,MCnBX,SAASM,IACtB,IAEKT,EAFYU,cAEMN,MAAMJ,OAAxBA,OAEL,OACG,yBAAKd,UAAU,eACZ,yBAAKoB,IAAKN,EAAOO,MAAOC,IAAKR,EAAOG,QACrC,4BAAKH,EAAOG,OACZ,2CACCH,EAAOW,gBAAgBZ,KAAI,SAACa,GAAD,OAC1B,2BAAIA,OCiCEC,MArCf,WAAgB,IAAD,EAEiBhC,mBAAS,IAF1B,mBAENe,EAFM,KAEGkB,EAFH,OAGYjC,mBAAS,IAHrB,mBAGNkC,EAHM,KAGC/B,EAHD,KAOPa,EAAS,uCAAG,8BAAAmB,EAAA,sEACOC,MAAM,mCAAD,OACSF,EADT,mBAJjB,WAIiB,oBAHhB,qCAEI,cACVG,EADU,gBAIGA,EAASC,OAJZ,OAIVC,EAJU,OAMhBN,EAAWM,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MAPD,2CAAH,qDAeb,OALFG,qBAAU,WACR3B,MAEC,CAACkB,IAGA,kBAACrC,EAAc+C,SAAf,CAAwBlC,MAAO,CAACP,WAAUY,UAASC,cACjD,kBAAC,IAAD,KACF,yBAAKX,UAAU,OAEb,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOwC,KAAK,gBAAgBC,OAAK,EAACC,UAAWjC,IAC7C,kBAAC,IAAD,CAAO+B,KAAK,cAAcC,OAAK,EAACC,UAAWnB,SC5B/BoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.3c98bc68.chunk.js","sourcesContent":["import { createContext} from 'react';\r\n\r\n\r\n\r\n//create context\r\nexport const GlobalContext = createContext({});\r\n","import React, {useState, useContext} from 'react';\r\nimport {GlobalContext} from '../context/GlobalState';\r\n\r\nimport './Form.css';\r\n\r\nconst Form = () => {\r\n\r\n    const [search, setSearch] = useState(\"\");\r\n    const {setQuery} = useContext(GlobalContext);\r\n\r\n    const updateSearch = (e) => {\r\n        setSearch(e.target.value);\r\n      };\r\n    \r\n      const getSearch = (e) => {\r\n        e.preventDefault();\r\n        setQuery(search);\r\n        setSearch(\"\");\r\n      };\r\n    return (\r\n           <form className='search-form'  onSubmit={getSearch}>\r\n      <input\r\n        className=\"search-bar\"\r\n        type=\"text\"\r\n        value={search}\r\n        onChange={updateSearch}\r\n        placeholder='Find a recipe'\r\n      ></input>\r\n                \r\n<button className=\"search-button\" type=\"submit\">\r\n      Search\r\n</button>\r\n\r\n    </form> \r\n    \r\n    )\r\n}\r\n\r\nexport default Form\r\n","import React, { useContext } from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {GlobalContext} from '../context/GlobalState';\r\nimport Form from './Form';\r\nimport './Recipes.css';\r\nconst Recipes = () => {\r\n  const {recipes, getRecipe} =useContext(GlobalContext);\r\n    return (\r\n<div>\r\n        <div className=\"nav-bar\">\r\n         <Link to={'/React-recipe'} className='links'><nav>FoodBook</nav></Link>\r\n\r\n          <Form getRecipe={getRecipe}/>\r\n          </div>\r\n        <div className=\"recipes\">\r\n     {recipes.map((recipe, index) => (\r\n      <Link to={{\r\n  pathname: `/recipe/${recipe.recipe.label}`,\r\n  state: {recipe},\r\n  }}  className='links'>\r\n        <div className=\"recipe\" key={index}>\r\n\r\n       <img src={recipe.recipe.image} alt={recipe.recipe.label} />\r\n       <h1>{recipe.recipe.label}</h1>\r\n\r\n\r\n       \r\n\r\n     </div>\r\n     </Link>\r\n\r\n      )) }\r\n     \r\n    </div>\r\n    </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Recipes\r\n","import React from \"react\";\r\nimport \"./Recipe.css\";\r\nimport {useLocation} from 'react-router-dom';\r\n\r\nexport default function Recipe() {\r\n  const location = useLocation();\r\n\r\nconst {recipe} =location.state.recipe;\r\n\r\n  return (\r\n     <div className='description'>\r\n        <img src={recipe.image} alt={recipe.label} />\r\n       <h1>{recipe.label}</h1>\r\n       <h2>Ingredients</h2>\r\n       {recipe.ingredientLines.map((ingredient) => (\r\n         <p>{ingredient}</p>\r\n       ))\r\n       }\r\n     </div>\r\n     \r\n  );\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport \"./App.css\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route\r\n} from \"react-router-dom\";\r\nimport Recipes from './components/Recipes';\r\nimport Recipe from './components/Recipe';\r\n\r\nimport {GlobalContext} from './context/GlobalState';\r\nfunction App() {\r\n  \r\n  const [recipes, setRecipes] = useState([]);\r\n  const [query, setQuery]= useState('');\r\nconst APP_ID = '4d34059b';\r\nconst APP_KEY = 'c4e4cb59bf1d2fbc104bfec5a64f8eb1';\r\n\r\n  const getRecipe = async () => {\r\n    const response = await fetch(\r\n      `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\r\n    );\r\n    const data = await response.json();\r\n    //setRecipes(data.hits);\r\n    setRecipes(data.hits);\r\n    console.log(data.hits);\r\n  }; \r\n\r\n  useEffect(() => {\r\n    getRecipe();\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [query]);\r\n \r\n    return (\r\n      <GlobalContext.Provider value={{setQuery, recipes, getRecipe}}>\r\n        <Router>\r\n      <div className=\"App\">\r\n         \r\n        <Switch>\r\n        <Route path='/React-recipe' exact component={Recipes} />\r\n        <Route path='/recipe/:id' exact component={Recipe} />\r\n        </Switch>\r\n    </div>\r\n    </Router>\r\n    </GlobalContext.Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}