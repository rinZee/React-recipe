{"version":3,"sources":["components/Recipe.js","context/GlobalState.js","components/Form.js","components/Recipes.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["Recipe","GlobalContext","createContext","Form","useState","search","setSearch","setQuery","useContext","className","onSubmit","e","preventDefault","type","value","onChange","target","placeholder","Recipes","recipes","map","recipe","index","key","src","image","alt","label","to","pathname","Home","App","setRecipes","query","useEffect","getRecipe","a","fetch","response","json","data","hits","console","log","Provider","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wXAIe,SAASA,IAEtB,OACG,6BACE,sCCHA,IAAMC,EAAgBC,wBAAc,ICgC5BC,G,MAhCF,WAAO,IAAD,EAEaC,mBAAS,IAFtB,mBAERC,EAFQ,KAEAC,EAFA,KAGRC,EAAYC,qBAAWP,GAAvBM,SAWP,OACE,kBAAC,IAAD,KACK,0BAAME,UAAU,cAAeC,SAPlB,SAACC,GACjBA,EAAEC,iBACFL,EAASF,GACTC,EAAU,MAKZ,2BACEG,UAAU,aACVI,KAAK,OACLC,MAAOT,EACPU,SAhBiB,SAACJ,GAClBL,EAAUK,EAAEK,OAAOF,QAgBnBG,YAAY,kBAEd,4BAAQR,UAAU,gBAAgBI,KAAK,UAAvC,cCJSK,G,MApBC,WAAO,IACdC,EAAUX,qBAAWP,GAArBkB,QACL,OACE,kBAAC,IAAD,KACE,yBAAKV,UAAU,WACjBU,EAAUA,EAAQC,KAAI,SAACC,EAAQC,GAAT,OACrB,yBAAKb,UAAU,SAASc,IAAKD,GAC7B,yBAAKE,IAAKH,EAAOA,OAAOI,MAAOC,IAAI,KACnC,4BAAKL,EAAOA,OAAOM,OACnB,kBAAC,IAAD,CAAMC,GAAI,CAAEC,SAAU,YAAtB,mBAII,8CCPIC,EARF,WACT,OACI,6BACI,kBAAC,EAAD,QC0CGC,MApCf,WACE,IADa,EAGiB3B,mBAAS,IAH1B,mBAGNe,EAHM,KAGGa,EAHH,OAIY5B,mBAAS,IAJrB,mBAIN6B,EAJM,KAIC1B,EAJD,KAMb2B,qBAAU,WACRC,MACC,CAACF,IACJ,IAAME,EAAS,uCAAG,8BAAAC,EAAA,sEACOC,MAAM,mCAAD,OACSJ,EADT,mBATf,WASe,oBARd,qCAOE,cACVK,EADU,gBAIGA,EAASC,OAJZ,OAIVC,EAJU,OAKhBR,EAAWQ,EAAKC,MAChBC,QAAQC,IAAIH,EAAKC,MAND,2CAAH,qDAQb,OACE,kBAACxC,EAAc2C,SAAf,CAAwB9B,MAAO,CAACP,WAAUY,YACxC,kBAAC,IAAD,KACF,yBAAKV,UAAU,OACZ,yBAAKA,UAAU,WACd,kBAAC,IAAD,CAAMmB,GAAI,CAAEC,SAAU,MAAM,0CAC5B,kBAAC,EAAD,CAAMM,UAAWA,KAEnB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOU,KAAK,IAAIC,OAAK,EAACC,UAAWjB,IACjC,kBAAC,IAAD,CAAOe,KAAK,UAAUC,OAAK,EAACC,UAAW/C,SC3B7BgD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.ac5bd9ce.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Recipe.css\";\r\n\r\n\r\nexport default function Recipe() {\r\n\r\n  return (\r\n     <div>\r\n       <h1>hello</h1>\r\n     </div>\r\n     \r\n  );\r\n}\r\n","import { createContext} from 'react';\r\n\r\n\r\n\r\n//create context\r\nexport const GlobalContext = createContext({});\r\n","import React, {useState, useContext} from 'react';\r\nimport {GlobalContext} from '../context/GlobalState';\r\nimport './Form.css';\r\nimport {Link, BrowserRouter as Router} from 'react-router-dom';\r\n\r\nconst Form = () => {\r\n\r\n    const [search, setSearch] = useState(\"\");\r\n    const {setQuery} = useContext(GlobalContext);\r\n\r\n    const updateSearch = (e) => {\r\n        setSearch(e.target.value);\r\n      };\r\n    \r\n      const getSearch = (e) => {\r\n        e.preventDefault();\r\n        setQuery(search);\r\n        setSearch(\"\");\r\n      };\r\n    return (\r\n      <Router>\r\n           <form className='search-form'  onSubmit={getSearch}>\r\n      <input\r\n        className=\"search-bar\"\r\n        type=\"text\"\r\n        value={search}\r\n        onChange={updateSearch}\r\n        placeholder='Find a recipe'\r\n      ></input>\r\n      <button className=\"search-button\" type=\"submit\">\r\n      Search\r\n</button>\r\n    </form> \r\n    </Router>\r\n    )\r\n}\r\n\r\nexport default Form\r\n","import React, { useContext } from 'react';\r\nimport {Link, BrowserRouter as Router} from 'react-router-dom';\r\nimport {GlobalContext} from '../context/GlobalState';\r\n\r\nimport './Recipes.css';\r\nconst Recipes = () => {\r\n  const {recipes} =useContext(GlobalContext);\r\n    return (\r\n      <Router>\r\n        <div className=\"recipes\">\r\n     {recipes ? recipes.map((recipe, index) => (\r\n       <div className=\"recipe\" key={index}>\r\n       <img src={recipe.recipe.image} alt=\"\" />\r\n       <h1>{recipe.recipe.label}</h1>\r\n       <Link to={{ pathname: \"/recipe\"}}>View Recipe</Link>\r\n       \r\n     </div>\r\n        \r\n      )) : <h1>No results</h1>}\r\n      \r\n    </div>\r\n    </Router>\r\n    )\r\n}\r\n\r\nexport default Recipes\r\n","import React from 'react'\r\nimport Recipes from './Recipes';\r\n\r\nconst Home = () => {\r\n    return (\r\n        <div>\r\n            <Recipes />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","import React, { useState, useEffect } from 'react';\nimport \"./App.css\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route, Link\n} from \"react-router-dom\";\nimport Recipe from './components/Recipe';\nimport Form from './components/Form';\nimport Home from './components/Home';\n\nimport {GlobalContext} from './context/GlobalState';\nfunction App() {\n  const APP_ID = \"4d34059b\";\n  const APP_KEY = \"c4e4cb59bf1d2fbc104bfec5a64f8eb1\";\n  const [recipes, setRecipes] = useState([]);\n  const [query, setQuery]= useState('');\n\n  useEffect(() => {\n    getRecipe();\n  }, [query]);\n  const getRecipe = async () => {\n    const response = await fetch(\n      `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\n    );\n    const data = await response.json();\n    setRecipes(data.hits);\n    console.log(data.hits)\n  }; \n    return (\n      <GlobalContext.Provider value={{setQuery, recipes}}>\n        <Router>\n      <div className=\"App\">\n         <div className=\"nav-bar\">\n          <Link to={{ pathname: \"/\"}}><nav>FoodBook</nav></Link>\n          <Form getRecipe={getRecipe}/>\n        </div>\n        <Switch>\n          <Route path='/' exact component={Home} />\n          <Route path='/recipe' exact component={Recipe} />\n          \n        </Switch>\n    </div>\n    </Router>\n    </GlobalContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}